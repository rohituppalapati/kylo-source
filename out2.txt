core/operational-metadata/operational-metadata-jpa/src/main/java/com/thinkbiganalytics/metadata/jpa/feed/OpsFeedManagerFeedProvider.java:    @Value("${kylo.ops.mgr.ensure-unique-feed-name:true}")
core/cluster-manager/cluster-manager-core/src/main/java/com/thinkbiganalytics/cluster/JGroupsClusterService.java:    @Value("${kylo.cluster.jgroupsConfigFile:#{null}}")
core/cluster-manager/cluster-manager-core/src/main/java/com/thinkbiganalytics/cluster/JGroupsClusterService.java:    @Value("${kylo.cluster.acknowledge:false}")
core/cluster-manager/cluster-manager-core/src/main/java/com/thinkbiganalytics/cluster/JGroupsClusterService.java:    @Value("${kylo.cluster.pending.acknowledge.expire.minutes:30}")
install/install-inspector/install-inspector-app/node_modules/generator-jhipster/generators/server/templates/src/test/java/package/config/_DatabaseTestConfiguration.java:    public DatabaseTestConfiguration(@Value("${spring.couchbase.bucket.name}") String name) {
install/install-inspector/install-inspector-app/node_modules/generator-jhipster/generators/server/templates/src/main/java/package/config/cassandra/_CassandraConfiguration.java:    @Value("${spring.data.cassandra.protocolVersion:V4}")
install/install-inspector/install-inspector-app/node_modules/generator-jhipster/generators/server/templates/src/main/java/package/config/_LoggingConfiguration.java:    public LoggingConfiguration(@Value("${spring.application.name}") String appName, @Value("${server.port}") String serverPort,
install/install-inspector/install-inspector-app/node_modules/generator-jhipster/generators/server/templates/src/main/java/package/config/_LoggingConfiguration.java:        <% if (serviceDiscoveryType === "eureka") { %>@Autowired(required = false) EurekaInstanceConfigBean eurekaInstanceConfigBean,<% } %><% if (serviceDiscoveryType === "consul") { %> ConsulRegistration consulRegistration,<% } %><% if (serviceDiscoveryType && (applicationType === 'microservice' || applicationType === 'gateway' || applicationType === 'uaa')) { %> @Value("${info.project.version}") String version,<% } %> JHipsterProperties jHipsterProperties) {
install/install-inspector/install-inspector-app/src/main/java/com/thinkbiganalytics/install/inspector/service/InspectorService.java:    @Value("${info.project.version}")
install/install-inspector/install-inspector-app/src/main/java/com/thinkbiganalytics/install/inspector/service/InspectorService.java:    @Value("${inspections.path:}")
install/install-inspector/node_modules/generator-jhipster/generators/server/templates/src/test/java/package/config/_DatabaseTestConfiguration.java:    public DatabaseTestConfiguration(@Value("${spring.couchbase.bucket.name}") String name) {
install/install-inspector/node_modules/generator-jhipster/generators/server/templates/src/main/java/package/config/cassandra/_CassandraConfiguration.java:    @Value("${spring.data.cassandra.protocolVersion:V4}")
install/install-inspector/node_modules/generator-jhipster/generators/server/templates/src/main/java/package/config/_LoggingConfiguration.java:    public LoggingConfiguration(@Value("${spring.application.name}") String appName, @Value("${server.port}") String serverPort,
install/install-inspector/node_modules/generator-jhipster/generators/server/templates/src/main/java/package/config/_LoggingConfiguration.java:        <% if (serviceDiscoveryType === "eureka") { %>@Autowired(required = false) EurekaInstanceConfigBean eurekaInstanceConfigBean,<% } %><% if (serviceDiscoveryType === "consul") { %> ConsulRegistration consulRegistration,<% } %><% if (serviceDiscoveryType && (applicationType === 'microservice' || applicationType === 'gateway' || applicationType === 'uaa')) { %> @Value("${info.project.version}") String version,<% } %> JHipsterProperties jHipsterProperties) {
integrations/nifi/nifi-rest/nifi-rest-client/nifi-rest-client-api/src/main/java/com/thinkbiganalytics/nifi/rest/NiFiObjectCache.java:    @Value("${nifi.cache.connections:true}")
integrations/nifi/nifi-rest/nifi-rest-client/nifi-rest-client-api/src/main/java/com/thinkbiganalytics/nifi/rest/NiFiObjectCache.java:    @Value("${nifi.cache.categoryGroups:true}")
integrations/spark/spark-shell-client/spark-shell-client-app/src/main/java/com/thinkbiganalytics/spark/SparkShellApp.java:    public int serverPort(@Nonnull @Value("${server.port}") final String serverPort, @Nonnull final SparkShellOptions parameters) {
integrations/spark/spark-shell-client/spark-shell-client-app/src/main/java/com/thinkbiganalytics/spark/SparkShellApp.java:    public SparkLocatorService sparkLocatorService(final SparkContext sc, @Value("${spark.shell.datasources.exclude}") final String excludedDataSources,
integrations/spark/spark-shell-client/spark-shell-client-app/src/main/java/com/thinkbiganalytics/spark/SparkShellApp.java:                                                   @Value("${spark.shell.datasources.include}") final String includedDataSources) {
integrations/spark/spark-shell-client/spark-shell-client-app/src/main/java/com/thinkbiganalytics/spark/SparkShellApp.java:    public List<String> getDownloadsDatasourceExcludes(@Value("${spark.shell.datasources.exclude.downloads}") String excludesStr) {
integrations/spark/spark-shell-client/spark-shell-client-app/src/main/java/com/thinkbiganalytics/spark/SparkShellApp.java:    public List<String> getTablesDatasourceExcludes(@Value("${spark.shell.datasources.exclude.tables}") String excludesStr) {
plugins/hadoop-authorization-ranger-default/hadoop-authorization-ranger/src/main/java/com/thinkbiganalytics/datalake/authorization/config/RangerConfiguration.java:    public HadoopAuthorizationService getAuthorizationService(@Value("${ranger.hostName}") String hostName
plugins/hadoop-authorization-ranger-default/hadoop-authorization-ranger/src/main/java/com/thinkbiganalytics/datalake/authorization/config/RangerConfiguration.java:        , @Value("${ranger.port}") int port
plugins/hadoop-authorization-ranger-default/hadoop-authorization-ranger/src/main/java/com/thinkbiganalytics/datalake/authorization/config/RangerConfiguration.java:        , @Value("${ranger.userName}") String userName
plugins/hadoop-authorization-ranger-default/hadoop-authorization-ranger/src/main/java/com/thinkbiganalytics/datalake/authorization/config/RangerConfiguration.java:        , @Value("${ranger.password}") String password
plugins/hadoop-authorization-ranger-default/hadoop-authorization-ranger/src/main/java/com/thinkbiganalytics/datalake/authorization/config/RangerConfiguration.java:        , @Value("${hdfs.repository.name}") String hdfsRepositoryName
plugins/hadoop-authorization-ranger-default/hadoop-authorization-ranger/src/main/java/com/thinkbiganalytics/datalake/authorization/config/RangerConfiguration.java:        , @Value("${hive.repository.name}") String hiveRepositoryName) {
plugins/service-monitor-kylo-cluster/src/main/java/com/thinkbiganalytics/cluster/ClusterServiceStatusCheck.java:    @Value("${kylo.cluster.nodeCount:#{null}}")
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:    public HadoopAuthorizationService getAuthorizationService(@Value("${beeline.connection.url}") String connectionURL
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${beeline.drive.name}") String driverURL
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${beeline.userName}") String userName
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${beeline.password}") String password
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${hdfs.hadoop.configuration}") String hadoopConfiguration
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${authorization.sentry.type}") String authorizationGroupType
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${authorization.sentry.unix.group.filePath}") String linuxGroupFilePath
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${authorization.sentry.ldap.url}") String ldapURL
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${authorization.sentry.ldap.authDn}") String ldapAdmin
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${authorization.sentry.ldap.password}") String ldapPassword
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${authorization.sentry.ldap.authenticator.groupDnPatterns}") String groupDnPattern
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${authorization.sentry.groups}") String sentryGroups
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${sentry.kerberos.principal}") String kerberosPrincipal
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${sentry.kerberos.KeytabLocation}") String kerberosKeytabLocation
plugins/hadoop-authorization-sentry-default/hadoop-authorization-sentry/src/main/java/com/thinkbiganalytics/datalake/authorization/config/SentryConfiguration.java:                                                              , @Value("${sentry.IsKerberosEnabled}") String kerberosEnabled) {    
plugins/service-monitor-cloudera/service-monitor-cloudera-service/src/main/java/com/thinkbiganalytics/servicemonitor/check/ClouderaServicesStatusCheck.java:    @Value("${cloudera.services.status:#{null}}")
plugins/service-monitor-ambari/src/main/java/com/thinkbiganalytics/servicemonitor/check/AmbariServicesStatusCheck.java:    @Value("${ambari.services.status:#{null}}")
security/security-auth-kylo-local/src/main/java/com/thinkbiganalytics/auth/kylo/KyloAuthConfig.java:    @Value("${security.auth.kylo.login.flag:required}")
security/security-auth-kylo-local/src/main/java/com/thinkbiganalytics/auth/kylo/KyloAuthConfig.java:    @Value("${security.auth.kylo.login.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).DEFAULT_ORDER}}")
security/security-auth-kylo-local/src/main/java/com/thinkbiganalytics/auth/kylo/KyloAuthConfig.java:    @Value("${security.auth.kylo.password.required:false}")
security/security-auth-kylo-groups/src/main/java/com/thinkbiganalytics/auth/groups/KyloGroupsConfig.java:    @Value("${security.auth.kylo.groups.login.flag:required}")
security/security-auth-kylo-groups/src/main/java/com/thinkbiganalytics/auth/groups/KyloGroupsConfig.java:    @Value("${security.auth.kylo.groups.login.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).HIGHEST_ORDER}}")
security/security-auth-kylo-groups/src/main/java/com/thinkbiganalytics/auth/groups/KyloGroupsConfig.java:    @Value("${security.auth.kylo.login.username:#{null}}")
security/security-auth-kylo-groups/src/main/java/com/thinkbiganalytics/auth/groups/KyloGroupsConfig.java:    @Value("${security.auth.kylo.login.password:#{null}}")
security/security-auth-kylo-rest/src/main/java/com/thinkbiganalytics/auth/rest/KyloRestAuthConfig.java:    @Value("${security.auth.kylo.login.flag:required}")
security/security-auth-kylo-rest/src/main/java/com/thinkbiganalytics/auth/rest/KyloRestAuthConfig.java:    @Value("${security.auth.kylo.login.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).DEFAULT_ORDER}}")
security/security-auth-kylo-rest/src/main/java/com/thinkbiganalytics/auth/rest/KyloRestAuthConfig.java:    @Value("${security.auth.kylo.login.username:#{null}}")
security/security-auth-kylo-rest/src/main/java/com/thinkbiganalytics/auth/rest/KyloRestAuthConfig.java:    @Value("${security.auth.kylo.login.password:#{null}}")
security/security-auth-kylo-rest/src/main/java/com/thinkbiganalytics/auth/rest/KyloRestAuthConfig.java:    @Value("${security.auth.kylo.login.servicesLogout:#{true}}")
security/security-auth-kerberos/src/main/java/com/thinkbiganalytics/security/auth/kerberos/KerberosLoginConfiguration.java:    @Value("${security.auth.krb.login.flag:required}")
security/security-auth-kerberos/src/main/java/com/thinkbiganalytics/security/auth/kerberos/KerberosLoginConfiguration.java:    @Value("${security.auth.krb.login.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).DEFAULT_ORDER}}")
security/security-auth-kerberos/src/main/java/com/thinkbiganalytics/security/auth/kerberos/KerberosSpnegoConfiguration.java:    @Value("${security.auth.krb.service-principal}")
security/security-auth-kerberos/src/main/java/com/thinkbiganalytics/security/auth/kerberos/KerberosSpnegoConfiguration.java:    @Value("${security.auth.krb.keytab}")
security/security-auth-spark/src/main/java/com/thinkbiganalytics/auth/spark/MemoryAuthConfig.java:    @Value("${security.auth.spark.login.flag:sufficient}")
security/security-auth-spark/src/main/java/com/thinkbiganalytics/auth/spark/MemoryAuthConfig.java:    @Value("${security.auth.spark.login.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).LOWEST_ORDER + 10}}")
security/security-auth-simple/src/main/java/com/thinkbiganalytics/auth/SimpleAuthConfig.java:    @Value("${security.auth.simple.login.flag:required}")
security/security-auth-simple/src/main/java/com/thinkbiganalytics/auth/SimpleAuthConfig.java:    @Value("${security.auth.simple.login.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).DEFAULT_ORDER}}")
security/security-auth-file/src/main/java/com/thinkbiganalytics/auth/file/FileAuthConfig.java:    @Value("${security.auth.file.login.flag:required}")
security/security-auth-file/src/main/java/com/thinkbiganalytics/auth/file/FileAuthConfig.java:    @Value("${security.auth.file.login.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).DEFAULT_ORDER}}")
security/security-auth-file/src/main/java/com/thinkbiganalytics/auth/file/FileAuthConfig.java:    @Value("${security.auth.file.users:users.properties}")
security/security-auth-file/src/main/java/com/thinkbiganalytics/auth/file/FileAuthConfig.java:    @Value("${security.auth.file.groups:groups.properties}")
security/security-auth-file/src/main/java/com/thinkbiganalytics/auth/file/FileAuthConfig.java:    @Value("${security.auth.file.password.hash.enabled:false}")
security/security-auth-file/src/main/java/com/thinkbiganalytics/auth/file/FileAuthConfig.java:    @Value("${security.auth.file.password.hash.algorithm:MD5}")
security/security-auth-file/src/main/java/com/thinkbiganalytics/auth/file/FileAuthConfig.java:    @Value("${security.auth.file.password.hash.encoding:base64}")
security/security-auth-cache/src/main/java/com/thinkbiganalytics/auth/cache/UserCacheAuthConfig.java:    @Value("${security.auth.cache.spec:expireAfterWrite=30s,maximumSize=512}")
security/security-auth-cache/src/main/java/com/thinkbiganalytics/auth/cache/UserCacheAuthConfig.java:    @Value("${security.auth.cache.digest.alg:SHA-256}")
security/security-auth-cache/src/main/java/com/thinkbiganalytics/auth/cache/UserCacheAuthConfig.java:    @Value("${security.auth.file.login.check.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).LOWEST_ORDER}}")
security/security-auth-cache/src/main/java/com/thinkbiganalytics/auth/cache/UserCacheAuthConfig.java:    @Value("${security.auth.file.login.save.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).HIGHEST_ORDER}}")
security/security-auth-ldap/src/main/java/com/thinkbiganalytics/security/auth/ad/ActiveDirectoryAuthConfig.java:    @Value("${security.auth.ad.login.flag:required}")
security/security-auth-ldap/src/main/java/com/thinkbiganalytics/security/auth/ad/ActiveDirectoryAuthConfig.java:    @Value("${security.auth.ad.login.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).DEFAULT_ORDER}}")
security/security-auth-ldap/src/main/java/com/thinkbiganalytics/security/auth/ldap/LdapAuthConfig.java:    @Value("${security.auth.ldap.login.flag:required}")
security/security-auth-ldap/src/main/java/com/thinkbiganalytics/security/auth/ldap/LdapAuthConfig.java:    @Value("${security.auth.ldap.login.order:#{T(com.thinkbiganalytics.auth.jaas.LoginConfiguration).DEFAULT_ORDER}}")
security/security-auth-ldap/src/main/java/com/thinkbiganalytics/security/auth/ldap/LdapAuthConfig.java:    @Value("${security.auth.ldap.authenticator.userDnPatterns}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/cache/CacheService.java:    @Value("${kylo.ops.mgr.dashboard.threads:20}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/jobrepo/nifi/provenance/ProvenanceEventReceiver.java:    @Value("${kylo.ops.mgr.query.nifi.bulletins:false}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/jobrepo/nifi/provenance/ProvenanceEventReceiver.java:    @Value("${kylo.ops.mgr.stream.finished.notification.wait-time-sec:5}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/jobrepo/nifi/provenance/NifiStatsJmsReceiver.java:    @Value("${kylo.ops.mgr.stats.compact.cron:0 0 0 1/1 * ? *}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/jobrepo/nifi/provenance/NifiStatsJmsReceiver.java:    @Value("${kylo.ops.mgr.stats.compact.enabled:true}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/jobrepo/nifi/provenance/NifiStatsJmsReceiver.java:    @Value("${kylo.ops.mgr.stats.nifi.bulletins.mem.size:30}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/jobrepo/nifi/provenance/NifiStatsJmsReceiver.java:    @Value("${kylo.ops.mgr.stats.nifi.bulletins.persist:false}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/jobrepo/nifi/provenance/RetryProvenanceEventWithDelay.java:    @Value("${kylo.provenance.retry.unregistered.events.enabled:true}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/jobrepo/nifi/provenance/RetryProvenanceEventWithDelay.java:    @Value("${kylo.provenance.retry.unregistered.events.waitTimeSec:5}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/jobrepo/nifi/provenance/RetryProvenanceEventWithDelay.java:    @Value("${kylo.provenance.retry.unregistered.events.maxRetries:3}")
services/operational-metadata-service/operational-metadata-integration-service/src/main/java/com/thinkbiganalytics/metadata/sla/DefaultServiceLevelAgreementScheduler.java:    @Value("${sla.cron.default:0 0/5 * 1/1 * ? *}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/nifi/TemplateConnectionUtil.java:    @Value("${nifi.create.remote-process-group.retry.sleep-time.millis:4000}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/nifi/TemplateConnectionUtil.java:    @Value("${nifi.create.remote-process-group.retry.max-attempts:10}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/nifi/cache/NifiFlowCacheImpl.java:    @Value("${nifi.flow.inspector.threads:1}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/nifi/cache/NifiFlowCacheImpl.java:    @Value("${nifi.flow.max.retries:100}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/nifi/cache/NifiFlowCacheImpl.java:    @Value("${nifi.flow.retry.wait.time.seconds:5}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/service/FeedManagerMetadataService.java:    @Value("${kylo.feed.mgr.cleanup.timeout:60000}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/service/FeedManagerMetadataService.java:    @Value("${kylo.feed.mgr.cleanup.delay:300}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/service/template/RegisteredTemplateService.java:    @Value("${kylo.template.remote-process-groups.enabled:false}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/service/feed/DefaultFeedManagerFeedService.java:    @Value("${nifi.remove.inactive.versioned.feeds:true}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/service/feed/DefaultFeedManagerFeedService.java:    @Value("${nifi.auto.align:true}")
services/feed-manager-service/feed-manager-controller/src/main/java/com/thinkbiganalytics/feedmgr/service/feed/DefaultFeedManagerFeedService.java:    @Value("${kylo.feed.mgr.hive.target.syncColumnDescriptions:true}")
services/service-app/src/main/java/com/thinkbiganalytics/rest/exception/BaseExceptionMapper.java:    @Value("${application.debug}")
ui/ui-app/src/main/java/com/thinkbiganalytics/ui/OpsManagerWebMvcConfigurerAdapter.java:    @Value("${static.path:}")
ui/ui-app/src/main/java/com/thinkbiganalytics/ui/FeedManagerWebMvcConfigurerAdapter.java:    @Value("${static.path:}")
